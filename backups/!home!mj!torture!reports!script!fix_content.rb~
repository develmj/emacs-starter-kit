# -*- coding: utf-8 -*-
require 'csv'
a = CSV.read("final.csv")

great_producttype_hash = {"clocks"=>true, "tableware"=>true, "curtains"=>true, "candles & fragrances"=>true, "weight scale"=>true, "laptop skins "=>true, "bath linen"=>true, "drinkware"=>true, "organisers"=>true, "lamps & lighting"=>true, "cookware"=>true, "cushions & cushion covers"=>true, "desk accessories"=>true, "health monitors"=>true, "phone covers"=>true, "shower curtains"=>true, "bar tools"=>true, "gardening accessories"=>true, "wall shelves"=>true, "kitchen storage"=>true, "bed sheets & bedspreads"=>true, "envelopes"=>true, "mouse pads"=>true, "bathroom accessories"=>true, "laundry baskets"=>true, "wall dÃ©cor"=>true, "kitchen tools"=>true, "rugs & carpets"=>true, "usbs"=>true, "bathroom fixtures"=>true, "ironing table"=>true, "vases & flowers"=>true, "linen"=>true, "doormats"=>true, "headphones"=>true, "tools"=>true, "showpieces"=>true, "tea & coffee"=>true, "quilts & blankets"=>true, "ladders"=>true, "spiritual products"=>true, "clothes dryer"=>true, "shoe rack"=>true, "dresses"=>true, "tops"=>true, "jeans & jeggings"=>true, "skirts & shorts"=>true, "trousers & leggings"=>true, "jumpsuits"=>true, "shrugs & jackets"=>true, "sweater & hoodies"=>true, "lingerie & sleepwear"=>true, "resort & swimwear"=>true, "sarees"=>true, "stitched kurta set"=>true, "unstitched kurta set"=>true, "semi-stitched kurta set"=>true, "kurtas"=>true, "lehengas"=>true, "blouses"=>true, "bottomwear"=>true, "dupattas & shawls"=>true, "shirts"=>true, "tees & t-shirts"=>true, "jeans"=>true, "shorts  "=>true, "trousers & chinos"=>true, "jackets & coats"=>true, "sweaters & hoodies"=>true, "suits"=>true, "innerwear"=>true, "wristwear"=>true, "earrings"=>true, "neckwear"=>true, "rings"=>true, "brooches & pins"=>true, "jewellery sets"=>true, "anklets"=>true, "head jewellery"=>true, "belts"=>true, "watches"=>true, "hats & caps"=>true, "stoles & scarves"=>true, "hair accessories"=>true, "sunglasses & optics"=>true, "cufflinks & ties"=>true, "socks"=>true, "other accessories"=>true, "totes & shoulder bags"=>true, "purses & clutches"=>true, "slings"=>true, "travel bags"=>true, "laptop bags & cases"=>true, "wallets & pouches"=>true, "flat shoes"=>true, "heels"=>true, "boots & booties"=>true, "wedges"=>true, "oxfords"=>true, "formal shoes"=>true, "casual shoes"=>true, "eau de parfum"=>true, "eau de toilette"=>true, "eau de cologne"=>true, "cologne splash"=>true, "deodorant spray"=>true, ""=>true, "n/a"=>true, "bean bags"=>true, "stationery"=>true, "knick knacks"=>true, "respiratory care"=>true, "pain management"=>true, "laptop skins"=>true, "mouse & mouse pads"=>true, "headphones & speakers"=>true, "bathroom cabinets"=>true}

great_colorfamily_hash = {"white"=>true, "black"=>true, "blue"=>true, "yellow"=>true, "red"=>true, "green"=>true, "pink"=>true, "orange"=>true, "purple"=>true, "grey"=>true, "brown"=>true, "gold"=>true, "silver"=>true, "bronze"=>true, "multi"=>true, "print"=>true, "cream"=>true, "rose gold"=>true}

final = []
wrong = []
a.shift
a.each{|x|
  w_pt = great_producttype_hash[x[14].to_s.downcase]
  w_cf = great_colorfamily_hash[x[15].to_s.downcase]
  unless w_pt and w_cf
    wrong << x
  else
    final << x
  end
}
wrong_sz = []
a.each{|x|
  if x[4] != x[16]
    if (x[16].to_s.downcase == "n/a" or x[16].to_s.downcase == "") and (x[4].to_s.downcase != "n/a" or x[4].to_s.downcase != "")
      wrong_sz << x
    elsif (x[16].to_s.downcase != "n/a" or x[16].to_s.downcase != "") and (x[4].to_s.downcase == "n/a" or x[4].to_s.downcase == "")
      wrong_sz << x
    end
  end
}

wrong_sz = wrong_sz.select{|x| x unless ["","n/a","na"].include?(x[16].to_s.downcase)}
final = a - (wrong + wrong_sz).uniq

size_changes = final.select{|x| x if x[4] != x[16] and ["","n/a","na"].include?(x[16].to_s.downcase) != true}
wrong_size_changes = size_changes.select{|x|  x if x[4].split(";").count != x[16].split(";").count }
wrong_sz = wrong_sz + wrong_size_changes

size_changes = size_changes - wrong_size_changes
prop_changes = final - size_changes

color_family_id = Spree::Property.find_by_name("color family").try(&:id)
product_type_id = Spree::Property.find_by_name("product type").try(&:id)

prop_changes_failed = []
prop_changes.each{|x|
  begin
    p = Spree::Product.find_by_id(x[1])
    if p
      if x[5].downcase != x[15] and ["","n/a","na"].include?(x[15].to_s.downcase) != true
        cur_color = p.product_properties.where(:property_id => color_family_id).last
        if cur_color
          cur_color.update_attributes({:value => x[15].to_s.gsub(/\b\w/){$&.upcase}},:without_protection => true)
        else
          cur_color = Spree::ProductProperty.new
          cur_color.product_id = x[1].to_i
          cur_color.property_id = color_family_id
          cur_color.value = x[15].to_s.gsub(/\b\w/){$&.upcase}
          cur_color.save
        end
      end

      if x[6].downcase != x[14] and ["","n/a","na"].include?(x[14].to_s.downcase) != true
        cur_ptype = p.product_properties.where(:property_id => product_type_id).last
        if cur_ptype
          cur_ptype.update_attributes({:value => x[14].to_s.gsub(/\b\w/){$&.upcase}},:without_protection => true)
        else
          cur_ptype = Spree::ProductProperty.new
          cur_ptype.product_id = x[1].to_i
          cur_ptype.property_id = product_type_id
          cur_ptype.value = x[14].to_s.gsub(/\b\w/){$&.upcase}
          cur_ptype.save
        end
      end
    else
      prop_changes_failed << x
    end
  rescue Exception => e
    prop_changes_failed << x
  end
}

#Create new sizes
all_sizes = size_changes.map{|x| x[16].split(";")}.flatten.map{|x| x.strip}.uniq

#Create those sizes which dont exist
sz_hash = {}
all_sizes.map{|x| sz_hash[x] = Spree::OptionValue.find_all_by_presentation(x)}
sz_kash.keys.map{|x| [x,h[x].count] if h[x].count == 0}.compact.uniq.each{|x|
  s = Spree::OptionValue.new
  s.option_type_id = 1
  s.name = x
  s.presentation = x
  s.position = Spree::OptionValue.last.position + 1
  s.save
}


