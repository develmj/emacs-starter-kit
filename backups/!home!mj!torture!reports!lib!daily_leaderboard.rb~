# -*- coding: utf-8 -*-
require 'rubygems'
require 'base64'
require 'net/smtp'
require "#{Rails.root}/lib/smtp_tls.rb"

ENV['RAILS_ENV'] = ARGV.first || ENV['RAILS_ENV'] || 'production'
require File.expand_path(File.dirname(__FILE__) + "/../config/environment.rb")

SMTP_PARAMS = {
  :smtp_server => "smtp.gmail.com",
  :smtp_port => 587,
  :smtp_helo => "StyletagNotification",
  :from_address => "notification@styletag.com",
  :smtp_username => "notification@styletag.com",
  :smtp_password => Base64.decode64("c3R5bGV0YWcxMjM=")
}

def sendmail_plain(msg, config)
  Net::SMTP.start( config[:smtp_server],
                   config[:smtp_port],
                   config[:smtp_helo],
                   config[:smtp_username],
                   config[:smtp_password],
                   :plain ) { |smtp|
    smtp.send_message( msg, config[:from_address], config[:to_address] )
  }
end

def gen_smtp_body(username,)
  begin
    smtp_msg = ""
    feeder.each{|x| smtp_msg << x[:description] + "<br\ >" }
    
    msg =<<EOF
Subject: [Cohort] #{(Time.now + 5.hours + 30.minutes).to_s}
Content-Type: text/html;charset="us-ascii"
Content-Transfer-Encoding: quoted-printable

#{smtp_msg}

EOF
    return msg 
  rescue Exception => e
    print "Exception occured in smtp_body" + e
  end
end

def get_data
  o = Spree::Order.select("id,user_id,total,completed_at").includes(:payments).where("state like 'complete' and cs_state not like 'initiate_cancel' and completed_at between ? and ? ",(DateTime.now.beginning_of_month - 5.hours - 30.minutes),(DateTime.now.end_of_month - 5.hours - 30.minutes))
  cc_id = Spree::PaymentMethod::Ebsin.where(:environment => Rails.env.to_s ,:active => true).first.try(:id)
  u = {}
  o.each{|x|
    if u[x.user_id]
      u[x.user_id][0] += 1
      u[x.user_id][1] += x.total.to_f
      if x.completed_at.day < 16
        u[x.user_id][1] += [1000.0,x.total.to_f].min if x.payment.payment_method_id == cc_id
      end
    else
      u[x.user_id] = [1,x.total.to_f]
    end
  }
  
  ret = u.to_a.sort{|x,y| x[1][1] <=> y[1][1]}.reverse[0..19]
  return ret
end


def state_change(old,new)
  new_h = {}
  old_h = {}
  down = []
  same = []
  up = []
  entry = []
  exit = []
  old.each_with_index{|x,y|
    old_h[x[0]] = [y,x]
  }

  new.each_with_index{|x,y|
    new_h[x[0]] = [y,x]
  }

  old_h.keys.each{|x|
    if new_h[x]
      data = old_h[x][1]
      if old_h[x][0] < new_h[x][0]
        down << [data[0],new_h[x][0]]
      elsif old_h[x][0] > new_h[x][0]
        up << [data[0],new_h[x][0]]
      elsif old_h[x][0] == new_h[x][0]
        same << [data[0],new_h[x][0]]
      end
    else
      data = old_h[x][1]
      exit << [data[0],old_h[x][0]]
    end
  }

  (new_h.keys - old_h.keys).each{|x|
    data = new_h[x][1]
    entry << [data[0],new_h[x][0]]
  }
  return up,down,same,exit,entry
end

